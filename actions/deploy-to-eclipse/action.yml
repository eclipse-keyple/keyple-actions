name: Upload artifacts to Eclipse server
description: Uploads artifacts to download.eclipse.org via SSH
inputs:
  ssh-private-key:
    required: true
    description: SSH private key for login to Eclipse server
  ssh-passphrase:
    required: true
    description: Passphrase for the SSH private key
  ssh-username:
    required: true
    description: Username for the SSH connection
  is-release:
    required: true
    description: true if this is a release, otherwise false

runs:
  using: "composite"
  steps:
    - name: Create repository folder and collect JARs
      shell: bash
      run: |
        mkdir -p repository
        find . -path "*build/libs/*.jar" -exec cp {} repository/ \;
        echo "Artifacts found:"
        ls -l repository/

    - name: Determine upload target
      id: context
      shell: bash
      run: |
        if [ "${{ inputs.is-release }}" = "true" ]; then
          echo "version_type=releases" >> $GITHUB_OUTPUT
        else
          echo "version_type=snapshots" >> $GITHUB_OUTPUT
        fi

    - name: Connect and upload artifacts
      env:
        SSH_PRIVATE_KEY: ${{ inputs.ssh-private-key }}
        SSH_PASSPHRASE: ${{ inputs.ssh-passphrase }}
        SSH_USERNAME: ${{ inputs.ssh-username }}
        VERSION_TYPE: ${{ steps.context.outputs.version_type }}
      shell: bash
      run: |
        set -e # Stop the script at the first error
        
        echo "--- Installing prerequisites ---"
        sudo apt-get update -qq && sudo apt-get install -y expect openssh-client
        
        # Verify expect is available
        if ! command -v expect &> /dev/null; then
          echo "Error: Failed to install expect"
          exit 1
        fi
        
        echo "âœ… Prerequisites installed: expect $(which expect)"
        
        echo "--- Starting SSH agent and adding key ---"
        eval "$(ssh-agent -s)"
        
        # Create a temporary file for the private key
        TEMP_KEY=$(mktemp)
        echo "$SSH_PRIVATE_KEY" > "$TEMP_KEY"
        chmod 600 "$TEMP_KEY"
        
        # Create a temporary expect script to handle passphrase properly
        EXPECT_SCRIPT=$(mktemp)
        cat > "$EXPECT_SCRIPT" << 'EXPECT_EOF'
        #!/usr/bin/expect -f
        set timeout 30
        set key_file [lindex $argv 0]
        set passphrase [lindex $argv 1]
        
        spawn ssh-add $key_file
        expect {
            "Enter passphrase*" {
                send "$passphrase\r"
                expect eof
            }
            "Bad passphrase*" {
                puts "Error: Bad passphrase"
                exit 1
            }
            timeout {
                puts "Error: Timeout waiting for passphrase prompt"
                exit 1
            }
            eof {
                # Key might not have a passphrase
            }
        }
        EXPECT_EOF
        
        chmod +x "$EXPECT_SCRIPT"
        
        # Add the key using expect script
        if ! "$EXPECT_SCRIPT" "$TEMP_KEY" "$SSH_PASSPHRASE"; then
          echo "Error: Failed to add SSH key"
          rm -f "$TEMP_KEY" "$EXPECT_SCRIPT"
          exit 1
        fi
        
        echo "Key added to agent:"
        ssh-add -l
        
        echo "--- Adding server to known hosts ---"
        mkdir -p ~/.ssh
        ssh-keyscan -H projects-storage.eclipse.org >> ~/.ssh/known_hosts
        
        echo "--- Testing SSH connection ---"
        if ! ssh -o ConnectTimeout=10 -o BatchMode=yes "$SSH_USERNAME@projects-storage.eclipse.org" "echo 'SSH connection successful'"; then
          echo "Error: SSH connection failed"
          rm -f "$TEMP_KEY" "$EXPECT_SCRIPT"
          exit 1
        fi
        
        echo "--- Uploading to: $VERSION_TYPE ---"
        # Remote directory creation with error handling
        if ! ssh "$SSH_USERNAME@projects-storage.eclipse.org" "mkdir -p /home/data/httpd/download.eclipse.org/keyple/$VERSION_TYPE"; then
          echo "Error: Failed to create remote directory"
          rm -f "$TEMP_KEY" "$EXPECT_SCRIPT"
          exit 1
        fi
        
        # Sending files with progress and error handling
        if ! scp -r -o ConnectTimeout=30 repository/* "$SSH_USERNAME@projects-storage.eclipse.org:/home/data/httpd/download.eclipse.org/keyple/$VERSION_TYPE/"; then
          echo "Error: Failed to upload files"
          rm -f "$TEMP_KEY" "$EXPECT_SCRIPT"
          exit 1
        fi
        
        echo "--- Verifying upload ---"
        if ssh "$SSH_USERNAME@projects-storage.eclipse.org" "ls -la /home/data/httpd/download.eclipse.org/keyple/$VERSION_TYPE/"; then
          echo "--- Upload complete and verified ---"
        else
          echo "Warning: Could not verify upload, but transfer appeared successful"
        fi
        
        # Cleanup temporary files
        rm -f "$TEMP_KEY" "$EXPECT_SCRIPT"